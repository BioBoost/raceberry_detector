public Main()
{
	//:HIDDENPORT[inParameterName] TRUE
	//:HIDDENPORT[inVerify] TRUE
	GigEVision_SetRealParameter
	(
		inAddress: "00:0F:31:4C:99:3A"
		inParameterName: "ExposureTimeAbs"
		inValue: 40000.000000
		inVerify: True
	)

	//:HIDDENPORT[inTimeout] TRUE
	TcpIp_Connect
	(
		inHost: "10.182.34.184"
		inPort: 1337
		inTimeout: 1000
		outSocket: con_4fe407ca_9949_4608_b55c_ababa3b8f13d
	)

	DetectorLoop
	(
		inTcpSocket: con_4fe407ca_9949_4608_b55c_ababa3b8f13d
		outImage: Nil
	)

	//:HIDDENPORT[inGraceful] TRUE
	TcpIp_Close
	(
		inSocket: con_4fe407ca_9949_4608_b55c_ababa3b8f13d
		inGraceful: True
	)
}

public FindMaze(Image inGreyImage, Image inSaturatedImage, Image? outRotatedCroppedImage) step
	expand inGreyImage.Width
	expand inGreyImage.Height
{
	FindMazeRectangle
	(
		inImage: inGreyImage
		outBoundingRectangle: con_75455fd7_96c4_4d34_9f8e_ba371cbed624
	)

	//:HIDDENPORT[inInterpolationMethod] TRUE
	//:HIDDENPORT[outOutputAlignment] TRUE
	CropImageToRectangle
	(
		inImage: inSaturatedImage
		inRectangle: con_75455fd7_96c4_4d34_9f8e_ba371cbed624
		inRectangleAlignment: Nil
		inInterpolationMethod: Bilinear
		inMargin: 0.000000
		outImage: con_18d6a6e9_f2c3_4da3_8d8c_158a467ba01b
		outAlignedRectangle: Nil
		outOutputAlignment: Nil
	)

	outRotatedCroppedImage = con_18d6a6e9_f2c3_4da3_8d8c_158a467ba01b
}

public FindPololus(Image inImage, Integer<0, INF> inMinCenterArea, Integer<0, INF>* inMaxCenterArea, Real<0, INF> inROIRadius, Image outImage, IntegerArray outIds, RealArray outPositionsX, RealArray outPositionsY, Real?Array outDirectionAngleRadians) step
{
	FindCentersOfPololus
	(
		inMinCenterArea: inMinCenterArea
		inMaxCenterArea: inMaxCenterArea
		inImage: inImage
		inMaxCenterThreshold: 100.000000
		outCenters: con_21b5bc4f_a8d7_4883_9072_17a87f4673eb
	)

	DetermineDirectionAndID
	(
		inPoint: con_21b5bc4f_a8d7_4883_9072_17a87f4673eb
		inImage: inImage
		inROIRadius: inROIRadius
		inDirectionMaxTheshold: 100.000000
		outCenter: con_f09e5726_dde0_429e_bb1e_3407c961562a
		outDirectionVector: con_dfcb70b8_3be4_43f9_a1c3_4dc64a582e5d
		outDirectionAngleRadians: con_8019b420_a659_4952_bb29_d56254acca8a
		outROICircle: Nil
		outDotCount: con_a8a17058_c4c0_42ec_9586_ba8e2fa1dc58
		outDirectionAngleDegrees: Nil
		outCenter.X: con_8c1c14e5_ca3d_4d3f_abbc_96837da0f4f6
		outCenter.Y: con_4c6eda57_43fb_4262_842f_8e8e1b1804a7
	)

	//:HIDDENPORT[inColors] TRUE
	//:HIDDENPORT[inDrawingStyle] TRUE
	//:HIDDENPORT[inHeadSize] TRUE
	//:HIDDENPORT[inForceRgb] TRUE
	DrawVectors_Palette
	(
		inImage: inImage
		inVectors: con_dfcb70b8_3be4_43f9_a1c3_4dc64a582e5d
		inInitialPoints: con_f09e5726_dde0_429e_bb1e_3407c961562a
		inVectorAlignment: Nil
		inColors:
			PixelArray
			{
				Pixel
				(
					X: 0.000000
					Y: 255.000000
					Z: 0.000000
					W: 0.000000
				)
				Pixel
				(
					X: 255.000000
					Y: 1.000000
					Z: 255.000000
					W: 0.000000
				)
				Pixel
				(
					X: 255.000000
					Y: 255.000000
					Z: 0.000000
					W: 0.000000
				)
				Pixel
				(
					X: 0.000000
					Y: 255.000000
					Z: 255.000000
					W: 0.000000
				)
			}
		inDrawingStyle:
			DrawingStyle
			(
				DrawingMode: HighQuality
				Opacity: 1.000000
				Thickness: 5.000000
				Filled: True
				PointShape: Nil
				PointSize: 1.000000
			)
		inHeadSize: 12.000000
		inForceRgb: True
		outImage: con_04c755e3_89d3_4df5_999a_8a75c6a47e57
	)

	//:HIDDENPORT[inLocationAlignment] TRUE
	//:HIDDENPORT[inLocationAnchor] TRUE
	//:HIDDENPORT[inColors] TRUE
	//:HIDDENPORT[inDrawingStyle] TRUE
	//:HIDDENPORT[inSize] TRUE
	//:HIDDENPORT[inForceRgb] TRUE
	//:HIDDENPORT[inBackgroundColor] TRUE
	DrawStrings_Palette
	(
		inImage: con_04c755e3_89d3_4df5_999a_8a75c6a47e57
		inStrings: con_a8a17058_c4c0_42ec_9586_ba8e2fa1dc58
		inLocations: con_f09e5726_dde0_429e_bb1e_3407c961562a
		inLocationAlignment: Nil
		inLocationAnchor: MiddleCenter
		inColors:
			PixelArray
			{
				Pixel
				(
					X: 0.000000
					Y: 255.000000
					Z: 0.000000
					W: 0.000000
				)
				Pixel
				(
					X: 255.000000
					Y: 1.000000
					Z: 255.000000
					W: 0.000000
				)
				Pixel
				(
					X: 255.000000
					Y: 255.000000
					Z: 0.000000
					W: 0.000000
				)
				Pixel
				(
					X: 0.000000
					Y: 255.000000
					Z: 255.000000
					W: 0.000000
				)
			}
		inDrawingStyle:
			DrawingStyle
			(
				DrawingMode: HighQuality
				Opacity: 1.000000
				Thickness: 1.000000
				Filled: False
				PointShape: Nil
				PointSize: 1.000000
			)
		inSize: 24.000000
		inOrientationAngle: 0.000000
		inForceRgb: True
		inBackgroundColor: Pixel()
		outImage: con_c9e41a62_23e1_4923_8be1_e3fc0f0025f2
	)

	outImage = con_c9e41a62_23e1_4923_8be1_e3fc0f0025f2

	outIds = con_a8a17058_c4c0_42ec_9586_ba8e2fa1dc58

	outPositionsX = con_8c1c14e5_ca3d_4d3f_abbc_96837da0f4f6

	outPositionsY = con_4c6eda57_43fb_4262_842f_8e8e1b1804a7

	outDirectionAngleRadians = con_8019b420_a659_4952_bb29_d56254acca8a
}

public FindCentersOfPololus(Integer<0, INF> inMinCenterArea = 200, Integer<0, INF>* inMaxCenterArea = 300, Image inImage, Real* inMaxCenterThreshold = 90.000000, Point2DArray outCenters) step
{
	ThresholdToRegion
	(
		inImage: inImage
		inRoi: Nil
		inMinValue: Nil
		inMaxValue: inMaxCenterThreshold
		outRegion: con_f8184954_07ec_48a7_afc4_192f2f8958ef
	)

	//:HIDDENPORT[inConnectivity] TRUE
	//:HIDDENPORT[inRemoveBoundaryBlobs] TRUE
	SplitRegionIntoBlobs
	(
		inRegion: con_f8184954_07ec_48a7_afc4_192f2f8958ef
		inConnectivity: FourDirections
		inMinBlobArea: 1
		inMaxBlobArea: Nil
		inRemoveBoundaryBlobs: True
		outBlobs: con_9e920cb4_e34b_4d6a_b1ce_53189c96e6f8
	)

	RegionArea
	(
		inRegion: con_9e920cb4_e34b_4d6a_b1ce_53189c96e6f8
		outArea: Nil
	)

	RegionElongation
	(
		inRegion: con_9e920cb4_e34b_4d6a_b1ce_53189c96e6f8
		outElongation: Nil
	)

	//Select blobs satisfying specs of center blobs
	//:HIDDENPORT[inFeature] TRUE
	//:HIDDENPORT[outBelow] TRUE
	//:HIDDENPORT[outAbove] TRUE
	ClassifyRegions
	(
		inRegions: con_9e920cb4_e34b_4d6a_b1ce_53189c96e6f8
		inFeature: Area
		inMinimum: inMinCenterArea
		inMaximum: inMaxCenterArea
		outAccepted: con_4fe2fcdf_b500_4686_b937_498fe0724159
		outRejected: Nil
		outBelow: Nil
		outAbove: Nil
		outValues: Nil
	)

	//Select blobs satisfying specs of center blobs
	//:HIDDENPORT[inFeature] TRUE
	//:HIDDENPORT[outBelow] TRUE
	//:HIDDENPORT[outAbove] TRUE
	ClassifyRegions
	(
		inRegions: con_4fe2fcdf_b500_4686_b937_498fe0724159
		inFeature: Elongation
		inMinimum: Nil
		inMaximum: 1.200000
		outAccepted: con_e8e916ef_e845_42f4_9480_69857e94bc0d
		outRejected: Nil
		outBelow: Nil
		outAbove: Nil
		outValues: Nil
	)

	RegionArea
	(
		inRegion: con_e8e916ef_e845_42f4_9480_69857e94bc0d
		outArea: Nil
	)

	RegionElongation
	(
		inRegion: con_e8e916ef_e845_42f4_9480_69857e94bc0d
		outElongation: Nil
	)

	RegionMassCenter
	(
		inRegion: con_e8e916ef_e845_42f4_9480_69857e94bc0d
		outMassCenter: con_10daca58_61fd_4f10_a309_2f4ad9782bf0
	)

	outCenters = con_10daca58_61fd_4f10_a309_2f4ad9782bf0
}

//:OUTPUTHELP[outDirectionAngleRadians] In radians
public DetermineDirectionAndID(Point2D inPoint, Image inImage, Real<0, INF> inROIRadius = 60.000000, Real* inDirectionMaxTheshold = 80.000000, Point2D outCenter, Vector2D? outDirectionVector, Real? outDirectionAngleRadians, Circle2D outROICircle, Integer outDotCount, Real? outDirectionAngleDegrees) step
	expand inImage.Width
	expand inImage.Height
{
	//Create ROI
	//:HIDDENPORT[inPointAnchor] TRUE
	CreateCircle
	(
		inPoint: inPoint
		inPointAnchor: MiddleCenter
		inRadius: inROIRadius
		outCircle: con_e62ad94c_fc3e_4638_9573_8b185477fdb5
	)

	CreateCircleRegion
	(
		inCircle: con_e62ad94c_fc3e_4638_9573_8b185477fdb5
		inCircleAlignment: Nil
		inFrameWidth: inImage.Width
		inFrameHeight: inImage.Height
		outRegion: con_fa24c8b0_2167_4e5f_a4b1_279dd87589e1
		outAlignedCircle: Nil
	)

	ThresholdToRegion
	(
		inImage: inImage
		inRoi: con_fa24c8b0_2167_4e5f_a4b1_279dd87589e1
		inMinValue: Nil
		inMaxValue: inDirectionMaxTheshold
		outRegion: con_1897ee53_30c3_4870_b746_5625050ba621
	)

	//:HIDDENPORT[inConnectivity] TRUE
	//:HIDDENPORT[inRemoveBoundaryBlobs] TRUE
	SplitRegionIntoBlobs
	(
		inRegion: con_1897ee53_30c3_4870_b746_5625050ba621
		inConnectivity: FourDirections
		inMinBlobArea: 1
		inMaxBlobArea: Nil
		inRemoveBoundaryBlobs: False
		outBlobs: con_b79d96a3_704a_4dbc_a6a3_d7c8824a10ba
	)

	RegionArea
	(
		inRegion: con_b79d96a3_704a_4dbc_a6a3_d7c8824a10ba
		outArea: Nil
	)

	RegionElongation
	(
		inRegion: con_b79d96a3_704a_4dbc_a6a3_d7c8824a10ba
		outElongation: Nil
	)

	//Determine direction
	//:HIDDENPORT[inFeature] TRUE
	//:HIDDENPORT[outBelow] TRUE
	//:HIDDENPORT[outAbove] TRUE
	ClassifyRegions
	(
		inRegions: con_b79d96a3_704a_4dbc_a6a3_d7c8824a10ba
		inFeature: Elongation
		inMinimum: 2.000000
		inMaximum: 10.000000
		outAccepted: con_48436912_5561_4d27_a78b_7a548c321dbe
		outRejected: con_d64f5a1b_7e56_4e50_96d5_ed29cd814cd2
		outBelow: Nil
		outAbove: Nil
		outValues: Nil
	)

	SkipEmptyArray<Region>
	(
		inArray: con_48436912_5561_4d27_a78b_7a548c321dbe
		outNotEmptyArray: con_18f1d0c0_0fad_454f_9731_477252dbde89
		outIsNotEmpty: Nil
	)

	//:HIDDENPORT[inFeature] TRUE
	GetMaximumRegion
	(
		inRegions: con_18f1d0c0_0fad_454f_9731_477252dbde89
		inFeature: Area
		outRegion: con_c5d888f8_579f_4d8c_9196_e9c41ff6d194
		outValue: Nil
	)

	RegionMassCenter
	(
		inRegion: con_c5d888f8_579f_4d8c_9196_e9c41ff6d194
		outMassCenter: con_d5bcc145_40af_45bc_ab37_59bf4f7fd32d
	)

	VectorBetweenPoints
	(
		inFrom: inPoint
		inTo: con_d5bcc145_40af_45bc_ab37_59bf4f7fd32d
		outVector: con_684a5c8b_c340_4a85_b43a_6dfe22171d0d
	)

	VectorDirection
	(
		inVector: con_684a5c8b_c340_4a85_b43a_6dfe22171d0d
		outDirection: con_257c7747_c6e8_4cdb_b6af_618bf074a85f
	)

	DegreesToRadians
	(
		inDegrees: con_257c7747_c6e8_4cdb_b6af_618bf074a85f
		outRadians: con_bdfd2fa9_bd5a_4b7d_b24f_c8b00105e168
	)

	//Remove center region from list and count remaining dots
	TestPointInRegion
	(
		inPoint: inPoint
		inRegion: con_d64f5a1b_7e56_4e50_96d5_ed29cd814cd2
		outIsContained: con_f30b6c76_de7e_496c_bd41_7eb8a806552e
	)

	ClassifyByPredicate<Region>
	(
		inArray: con_d64f5a1b_7e56_4e50_96d5_ed29cd814cd2
		inPredicate: con_f30b6c76_de7e_496c_bd41_7eb8a806552e
		outAccepted: Nil
		outRejected: Nil
		outRejected.Count: con_12665de3_5901_4e4f_b784_078b43d92fe8
	)

	outCenter = inPoint

	outDirectionVector = con_684a5c8b_c340_4a85_b43a_6dfe22171d0d

	outDirectionAngleRadians = con_bdfd2fa9_bd5a_4b7d_b24f_c8b00105e168

	outROICircle = con_e62ad94c_fc3e_4638_9573_8b185477fdb5

	outDotCount = con_12665de3_5901_4e4f_b784_078b43d92fe8

	outDirectionAngleDegrees = con_257c7747_c6e8_4cdb_b6af_618bf074a85f
}

public CreatePositionAndDirectionJson(Integer inId, Real inXPosition, Real inYPosition, Real inAngle, String outJsonString) step
{
	//:HIDDENPORT[inValue5] TRUE
	//:HIDDENPORT[inValue6] TRUE
	//:HIDDENPORT[inValue7] TRUE
	//:HIDDENPORT[inValue8] TRUE
	CreateShortArray<String>
	(
		inValue1: inId
		inValue2: inXPosition
		inValue3: inYPosition
		inValue4: inAngle
		inValue5: Nil
		inValue6: Nil
		inValue7: Nil
		inValue8: Nil
		outArray: con_a0c5196c_f821_4ded_8266_3f022380cb6e
	)

	//:HIDDENPORT[inFormat] TRUE
	FormatString
	(
		inFormat: "\"robot%0%\": {\"x\": %1%, \"y\": %2%, \"angle\": %3% },"
		inData: con_a0c5196c_f821_4ded_8266_3f022380cb6e
		outFormattedString: con_9a792813_edbe_4947_af39_902987ba1e48
	)

	outJsonString = con_9a792813_edbe_4947_af39_902987ba1e48
}

public CreateJsonArrayOfPololus(String?Array inJsonStrings, String outJsonString) step
{
	RemoveNils<String>
	(
		inArray: inJsonStrings
		outArray: con_a427f877_7e4a_47cf_abcc_d98142d567ab
		outElementExisted: Nil
	)

	SkipEmptyArray<String>
	(
		inArray: con_a427f877_7e4a_47cf_abcc_d98142d567ab
		outNotEmptyArray: con_864d7a5d_8e37_4c35_bb58_02817daad88c
		outIsNotEmpty: Nil
	)

	ConcatenateStrings_OfArray
	(
		inStringArray: con_864d7a5d_8e37_4c35_bb58_02817daad88c
		outString: con_54985996_53e3_46fd_9208_63dbdc532b30
	)

	//:HIDDENPORT[inFind] TRUE
	//:HIDDENPORT[inEndPosition] TRUE
	FindLastInString
	(
		inString: con_54985996_53e3_46fd_9208_63dbdc532b30
		inFind: ","
		inEndPosition: Nil
		outPosition: con_3db9c8af_17b9_4ac5_b266_18520a9681cd
	)

	Substring
	(
		inString: con_54985996_53e3_46fd_9208_63dbdc532b30
		inStart: 0
		inLength: con_3db9c8af_17b9_4ac5_b266_18520a9681cd
		outSubstring: con_1e5554f4_d77b_4b4e_b716_f8386fd1abba
	)

	//:HIDDENPORT[inString4] TRUE
	//:HIDDENPORT[inString5] TRUE
	//:HIDDENPORT[inString6] TRUE
	//:HIDDENPORT[inString7] TRUE
	//:HIDDENPORT[inString8] TRUE
	ConcatenateStrings
	(
		inString1: "{"
		inString2: con_1e5554f4_d77b_4b4e_b716_f8386fd1abba
		inString3: "}"
		inString4: ""
		inString5: ""
		inString6: ""
		inString7: ""
		inString8: ""
		outString: con_6f64de0d_5392_4be8_9938_f83bed135ece
	)

	MergeWithDefault<String>
	(
		inConditionalObject: con_6f64de0d_5392_4be8_9938_f83bed135ece
		inDefaultObject: "{}"
		outObject: con_b4383cb0_8101_404b_89a2_858e6bd1bd7b
	)

	outJsonString = con_b4383cb0_8101_404b_89a2_858e6bd1bd7b
}

public PreprocessImage(Image inImage, Box inMazeROI, Real inLowSaturate = 116.000000, Real inHighSaturate = 230.000000, Image outSaturatedImage, Image outGreyImage) step
{
	AverageChannels
	(
		inImage: inImage
		inRoi: Nil
		outImage: con_71adb898_c7e1_446d_adf4_5e27056baaff
	)

	CropImage
	(
		inImage: con_71adb898_c7e1_446d_adf4_5e27056baaff
		inSelection: inMazeROI
		outImage: con_087c85c9_eb3d_471e_a9fb_d33b6fedbe81
	)

	UndistortImage_DivisionModel
	(
		inImage: con_087c85c9_eb3d_471e_a9fb_d33b6fedbe81
		inKappa: 6.000000
		inCenter: Nil
		inImageInterpolation: NearestNeighbour
		outImage: con_df57dc1a_b07c_4c36_8380_9501b0ad5f4c
	)

	ResaturateImage
	(
		inImage: con_df57dc1a_b07c_4c36_8380_9501b0ad5f4c
		inRoi: Nil
		inLowValue: inLowSaturate
		inHighValue: inHighSaturate
		outImage: con_de7c58b6_03dd_4912_b0d3_363db2f77983
	)

	outSaturatedImage = con_de7c58b6_03dd_4912_b0d3_363db2f77983

	outGreyImage = con_df57dc1a_b07c_4c36_8380_9501b0ad5f4c
}

//:INPUTHELP[inSelectCenterArea] Please select center circel of a pololu (real dark pixels)
//:INPUTHELP[inMazeWidth] In millimeters
//:INPUTHELP[inMazeHeight] In millimeters
public Configuration(Circle2D inSelectCenterArea, Integer<0, INF> inImageWidth, Integer<0, INF> inImageHeight, Circle2D inSelectTopArea, Circle2D inDotCircleArea, Real inMazeWidth = 2400.000000, Real inMazeHeight = 1180.000000, Integer outMinimalCenterArea, Integer outMaximalCenterArea, Real outTopAreaRadius, Real outScaleX, Real outScaleY) step
	expand inSelectTopArea.Radius
{
	CircleArea
	(
		inCircle: inSelectCenterArea
		outArea: con_d22b514c_dc88_4902_801b_e63101cf044b
	)

	expression
	{
		Integer inArea
		Integer inPercentage
		Integer outMinimalCenterArea = "integer(round(inArea -inArea*inPercentage/100))"
		Integer outMaximalCenterArea = "integer(round(inArea + inArea*inPercentage/100))"
	}
	(
		inArea: con_d22b514c_dc88_4902_801b_e63101cf044b
		inPercentage: 40
		outMinimalCenterArea: con_3cdf928b_d5e2_49e1_96ca_afce44bc757a
		outMaximalCenterArea: con_9d404a1a_e13f_4c7f_b7bc_6556828ebe61
	)

	CreateCircleRegion
	(
		inCircle:
			Circle2D
			(
				Center:
					Point2D
					(
						X: 591.012390
						Y: 588.272217
					)
				Radius: 9.738429
			)
		inCircleAlignment: Nil
		inFrameWidth: inImageWidth
		inFrameHeight: inImageHeight
		outRegion: Nil
		outAlignedCircle: Nil
	)

	disabled CircleArea
	(
		inCircle: inDotCircleArea
		outArea: con_7d5a1c67_7796_4bba_8744_3095713c1d21
	)

	disabled expression
	{
		Integer inArea
		Integer inPercentage
		Integer outMinimalDotArea = "integer(round(inArea -inArea*inPercentage/100))"
		Integer outMaximalDotArea = "integer(round(inArea + inArea*inPercentage/100))"
	}
	(
		inArea: con_7d5a1c67_7796_4bba_8744_3095713c1d21
		inPercentage: 80
		outMinimalDotArea: Nil
		outMaximalDotArea: Nil
	)

	expression
	{
		Integer inImageWidth
		Integer inImageHeight
		Real inMazeWidth
		Real inMazeHeight
		Real outScaleX = "inImageWidth/inMazeWidth"
		Real outScaleY = "inImageHeight/inMazeHeight"
	}
	(
		inImageWidth: inImageWidth
		inImageHeight: inImageHeight
		inMazeWidth: inMazeWidth
		inMazeHeight: inMazeHeight
		outScaleX: con_771f2f1f_fb9d_4bda_9a27_4d53fabcfc1a
		outScaleY: con_180843df_3c5f_40c4_b050_9e9a35706b39
	)

	outMinimalCenterArea = con_3cdf928b_d5e2_49e1_96ca_afce44bc757a

	outMaximalCenterArea = con_9d404a1a_e13f_4c7f_b7bc_6556828ebe61

	outTopAreaRadius = inSelectTopArea.Radius

	outScaleX = con_771f2f1f_fb9d_4bda_9a27_4d53fabcfc1a

	outScaleY = con_180843df_3c5f_40c4_b050_9e9a35706b39
}

public FindOuterMazeRegion(Image inImage, Region outOriginalThresholdRegion, Region outFilledOuterRegion) step
{
	ThresholdToRegion
	(
		inImage: inImage
		inRoi: Nil
		inMinValue: 100.000000
		inMaxValue: Nil
		outRegion: con_02177644_6209_4fe9_8c61_2403d6f5cf46
	)

	//This fills the full region even if someone is standing over the maze
	//:HIDDENPORT[inKernel] TRUE
	//:HIDDENPORT[inRadiusX] TRUE
	//:HIDDENPORT[inRadiusY] TRUE
	CloseRegion
	(
		inRegion: con_02177644_6209_4fe9_8c61_2403d6f5cf46
		inKernel: Box
		inRadiusX: 5000
		inRadiusY: 5000
		outRegion: con_1e6d2774_f590_4253_b080_158c3f21ca1c
	)

	//Fill remaining holes if any are left (probable not)
	//:HIDDENPORT[inConnectivity] TRUE
	//:HIDDENPORT[inMinHoleArea] TRUE
	//:HIDDENPORT[inMaxHoleArea] TRUE
	FillRegionHoles
	(
		inRegion: con_1e6d2774_f590_4253_b080_158c3f21ca1c
		inConnectivity: EightDirections
		inMinHoleArea: Nil
		inMaxHoleArea: Nil
		outRegion: con_bfedfcc2_da46_400e_a5e6_59aa1239f7e1
	)

	outOriginalThresholdRegion = con_02177644_6209_4fe9_8c61_2403d6f5cf46

	outFilledOuterRegion = con_bfedfcc2_da46_400e_a5e6_59aa1239f7e1
}

public RotateMazeImage(Segment2D inMazeRegionMajorAxis, Image inImage, Image outImage) step
{
	CreateSegment
	(
		inPoint: Point2D()
		inPointAnchor: 0.000000
		inDirection: 0.000000
		inLength: 100.000000
		outSegment: con_4078a956_4a5d_4d62_abf1_331617240c61
	)

	//:HIDDENPORT[inAngleMetric] TRUE
	//:HIDDENPORT[inAutodetectOrientation] TRUE
	AngleBetweenSegments
	(
		inSegment1: con_4078a956_4a5d_4d62_abf1_331617240c61
		inSegment2: inMazeRegionMajorAxis
		inAngleMetric: VectorClockwise
		inAutodetectOrientation: False
		outAbsoluteAngle: Nil
		outDirectedAngle: con_cca4294d_f77e_43df_9b63_ff64dc4bb8fb
		outArc: Nil
	)

	//:HIDDENPORT[inSizeMode] TRUE
	//:HIDDENPORT[inInterpolationMethod] TRUE
	//:HIDDENPORT[inInverse] TRUE
	RotateImage
	(
		inImage: inImage
		inAngle: con_cca4294d_f77e_43df_9b63_ff64dc4bb8fb
		inSizeMode: Fit
		inInterpolationMethod: Bilinear
		inInverse: True
		outImage: con_3e80cfbf_3eb6_4c48_8927_e22369664260
	)

	outImage = con_3e80cfbf_3eb6_4c48_8927_e22369664260
}

public FindMazeRectangle(Image inImage, Rectangle2D? outBoundingRectangle) step
{
	//:PLUGINCONFIG[inEdgeModel] raceberry_detector.197d6704.EdgeModel.avconfig
	//:HIDDENPORT[inMinPyramidLevel] TRUE
	//:HIDDENPORT[inMaxPyramidLevel] TRUE
	//:HIDDENPORT[inEdgeThreshold] TRUE
	//:HIDDENPORT[inIgnoreEdgePolarity] TRUE
	//:HIDDENPORT[inMinScore] TRUE
	//:HIDDENPORT[inMinDistance] TRUE
	//:HIDDENPORT[outObjects] TRUE
	LocateMultipleObjects_Edges
	(
		inImage: inImage
		inSearchRegion: Nil
		inEdgeModel: EdgeModel<raceberry_detector.b74cd5ac.EdgeModel.avdata>
		inMinPyramidLevel: 0
		inMaxPyramidLevel: 3
		inEdgeThreshold: 10.000000
		inIgnoreEdgePolarity: False
		inMinScore: 0.700000
		inMinDistance: 10.000000
		outObjects: Nil
		outPyramidHeight: Nil
		diagObjectEdges: Nil
		diagEdgePyramid: Nil
		diagMatchPyramid: Nil
		diagScores: Nil
		outObjects.Match: con_c5e2a65c_6e12_41a0_9eb0_5a2429f60f97
		outObjects.Alignment: Nil
		outObjects.Score: Nil
	)

	RectangleCenter
	(
		inRectangle: con_c5e2a65c_6e12_41a0_9eb0_5a2429f60f97
		outCenterPoint: con_89397690_c2de_4361_ada6_c288dde67db6
	)

	//:HIDDENPORT[inReferenceSize] TRUE
	TestArraySizeEqualTo<Point2D>
	(
		inArray: con_89397690_c2de_4361_ada6_c288dde67db6
		inReferenceSize: 4
		outIsEqual: con_7b9df908_246f_48f0_b7cd_4dd64c650dba
	)

	MakeConditional<Point2DArray>
	(
		inObject: con_89397690_c2de_4361_ada6_c288dde67db6
		inCondition: con_7b9df908_246f_48f0_b7cd_4dd64c650dba
		outConditionalObject: con_a3c4613e_1907_4d6f_81ba_929c1921a19a
	)

	PointToPointDistance
	(
		inPoint1: con_a3c4613e_1907_4d6f_81ba_929c1921a19a
		inPoint2: Point2D()
		inResolution: 1.000000
		outDistance: con_9a0250be_3681_4818_86e2_607a79bbb062
		outConnectingSegment: Nil
	)

	//:HIDDENPORT[inSortingOrder] TRUE
	SortArray<Point2D>
	(
		inArray: con_89397690_c2de_4361_ada6_c288dde67db6
		inValues: con_9a0250be_3681_4818_86e2_607a79bbb062
		inSortingOrder: Ascending
		outSortedArray: con_935f9db9_47b2_4b4e_a528_41464e75079e
		outSortedValues: Nil
	)

	//:HIDDENPORT[inInverse] TRUE
	GetArrayElement<Point2D>
	(
		inArray: con_935f9db9_47b2_4b4e_a528_41464e75079e
		inIndex: 0
		inInverse: False
		outValue: con_e55f2f87_9e34_42c8_8da6_b5e2ae86d4ce
	)

	//:HIDDENPORT[inInverse] TRUE
	GetArrayElement<Point2D>
	(
		inArray: con_935f9db9_47b2_4b4e_a528_41464e75079e
		inIndex: 1
		inInverse: False
		outValue: con_086906f6_fcd7_4528_8163_8b24363577dd
	)

	VectorBetweenPoints
	(
		inFrom: con_e55f2f87_9e34_42c8_8da6_b5e2ae86d4ce
		inTo: con_086906f6_fcd7_4528_8163_8b24363577dd
		outVector: con_a273db17_2fba_4e50_937e_276a451094be
	)

	CreateVector
	(
		inLength: 10.000000
		inDirection: 90.000000
		outVector: con_d45d03ff_2091_4416_b15c_6896116ce6e6
	)

	//:HIDDENPORT[inRotationDirection] TRUE
	AngleBetweenVectors
	(
		inVector1: con_d45d03ff_2091_4416_b15c_6896116ce6e6
		inVector2: con_a273db17_2fba_4e50_937e_276a451094be
		inRotationDirection: Nil
		outAbsoluteAngle: Nil
		outDirectedAngle: con_f6b21bf1_c45c_425d_826f_50e80a6730ed
	)

	//:HIDDENPORT[inBoundingRectangleFeature] TRUE
	PointsBoundingRectangle
	(
		inPoints: con_89397690_c2de_4361_ada6_c288dde67db6
		inRectangleOrientation: con_f6b21bf1_c45c_425d_826f_50e80a6730ed
		inBoundingRectangleFeature: MinimalArea
		outBoundingRectangle: con_687e4d4a_9afe_4e34_af50_d60f765ebcd5
		outCenter: Nil
		outLongSide: Nil
		outShortSide: Nil
	)

	MakeConditional<Rectangle2D>
	(
		inObject: con_687e4d4a_9afe_4e34_af50_d60f765ebcd5
		inCondition: con_7b9df908_246f_48f0_b7cd_4dd64c650dba
		outConditionalObject: con_ca2f408e_c7bb_405d_a375_54eef42f51f3
	)

	outBoundingRectangle = con_ca2f408e_c7bb_405d_a375_54eef42f51f3
}

public DetectorLoop(SocketId? inTcpSocket, Image? outImage)
{
	//:HIDDENPORT[inPixelFormat] TRUE
	//:HIDDENPORT[inInputQueueSize] TRUE
	GigEVision_GrabImage
	(
		inAddress: "00:0F:31:4C:99:3A"
		inPixelFormat: "BayerRG8"
		inInputQueueSize: 1
		outFrame: con_3f9e9967_4ab7_4159_a595_443b1829b7c1
		outFrameID: Nil
		outTimestamp: Nil
	)

	//:BGIMAGE[inMazeROI] @input:inImage
	PreprocessImage
	(
		inImage: con_3f9e9967_4ab7_4159_a595_443b1829b7c1
		inMazeROI:
			Box
			(
				X: -4
				Y: 434
				Width: 2444
				Height: 1328
			)
		inLowSaturate: 170.000000
		inHighSaturate: 170.000000
		outSaturatedImage: con_2e5fd2d0_7f1f_4e67_b59d_0040f08c07f0
		outGreyImage: con_6c3e02d0_9e2a_4d5b_a486_7001316676d2
	)

	FindMaze
	(
		inGreyImage: con_6c3e02d0_9e2a_4d5b_a486_7001316676d2
		inSaturatedImage: con_2e5fd2d0_7f1f_4e67_b59d_0040f08c07f0
		outRotatedCroppedImage: con_179746bf_6035_4bbe_ace0_a4257a0800c1
		outRotatedCroppedImage.Width: con_4a48c183_07df_432b_9a97_f84dffbffe4b
		outRotatedCroppedImage.Height: con_bd0404b1_5c3d_4b4d_8441_1405d80063fa
	)

	//Use this to configure the program easily
	//:BGIMAGE[inSelectCenterArea] con_179746bf_6035_4bbe_ace0_a4257a0800c1
	//:COORDINATESYSTEM[inSelectCenterArea] Absolute
	//:BGIMAGE[inSelectTopArea] con_179746bf_6035_4bbe_ace0_a4257a0800c1
	//:COORDINATESYSTEM[inSelectTopArea] Absolute
	//:BGIMAGE[inDotCircleArea] con_179746bf_6035_4bbe_ace0_a4257a0800c1
	//:COORDINATESYSTEM[inDotCircleArea] Absolute
	Configuration
	(
		inSelectCenterArea:
			Circle2D
			(
				Center:
					Point2D
					(
						X: 1666.237427
						Y: 651.266296
					)
				Radius: 7.622190
			)
		inImageWidth: con_4a48c183_07df_432b_9a97_f84dffbffe4b
		inImageHeight: con_bd0404b1_5c3d_4b4d_8441_1405d80063fa
		inSelectTopArea:
			Circle2D
			(
				Center:
					Point2D
					(
						X: 1660.786133
						Y: 644.877869
					)
				Radius: 37.816422
			)
		inDotCircleArea:
			Circle2D
			(
				Center:
					Point2D
					(
						X: 1686.576904
						Y: 656.043640
					)
				Radius: 2.628158
			)
		inMazeWidth: 2400.000000
		inMazeHeight: 1180.000000
		outMinimalCenterArea: con_acde6656_8f18_4ab9_a342_553d10d9e3b5
		outMaximalCenterArea: con_e9d5cee5_7130_4655_a517_73ce1e3e2486
		outTopAreaRadius: con_107a7d07_2802_4d9a_b263_29b4dffbc469
		outScaleX: con_61dd1d86_1296_4d20_9d22_a0523211cd72
		outScaleY: con_307c780e_6363_49e0_9396_be706a281845
	)

	FindPololus
	(
		inImage: con_179746bf_6035_4bbe_ace0_a4257a0800c1
		inMinCenterArea: con_acde6656_8f18_4ab9_a342_553d10d9e3b5
		inMaxCenterArea: con_e9d5cee5_7130_4655_a517_73ce1e3e2486
		inROIRadius: con_107a7d07_2802_4d9a_b263_29b4dffbc469
		outImage: con_12f59ac2_79e9_43c0_a0ad_b62e341d5843
		outIds: con_c0dc347c_96d0_4533_aded_270e2e81a864
		outPositionsX: con_8b72f080_0322_454d_9a71_f412a5b7b793
		outPositionsY: con_8743b5e5_eaae_4426_8009_f9b2cabcf6c7
		outDirectionAngleRadians: con_2d6e8b63_ef16_4538_a6f0_e0a17b6ba014
	)

	PixelsToMillimetres
	(
		inPixels: con_8b72f080_0322_454d_9a71_f412a5b7b793
		inScale: con_61dd1d86_1296_4d20_9d22_a0523211cd72
		outMillimetres: con_68e544e0_11c3_4464_b98f_e81504609178
	)

	PixelsToMillimetres
	(
		inPixels: con_8743b5e5_eaae_4426_8009_f9b2cabcf6c7
		inScale: con_307c780e_6363_49e0_9396_be706a281845
		outMillimetres: con_7385c4f9_0af9_4ab2_a130_aef65f4b6fbd
	)

	CreatePositionAndDirectionJson
	(
		inId: con_c0dc347c_96d0_4533_aded_270e2e81a864
		inXPosition: con_68e544e0_11c3_4464_b98f_e81504609178
		inYPosition: con_7385c4f9_0af9_4ab2_a130_aef65f4b6fbd
		inAngle: con_2d6e8b63_ef16_4538_a6f0_e0a17b6ba014
		outJsonString: con_b281e5c6_f74a_48ea_bf3f_502dd505daa3
	)

	CreateJsonArrayOfPololus
	(
		inJsonStrings: con_b281e5c6_f74a_48ea_bf3f_502dd505daa3
		outJsonString: con_265c86fd_251e_4273_bbdf_f20298682ec7
	)

	//:HIDDENPORT[inTimeout] TRUE
	//:HIDDENPORT[inSuffix] TRUE
	TcpIp_WriteText
	(
		inSocket: inTcpSocket
		inTimeout: Nil
		inText: con_265c86fd_251e_4273_bbdf_f20298682ec7
		inSuffix: "\\r\\n"
		outDisconnected: Nil
	)

	Tests
	(
		inExpectedRobotIds:
			{
				1
				2
				3
				4
				5
				6
				7
			}
		inActualRobotsIds: con_c0dc347c_96d0_4533_aded_270e2e81a864
		inRotatedCroppedImage: con_179746bf_6035_4bbe_ace0_a4257a0800c1
		outRobotsIdsPassed: con_37d25514_1ec9_47ee_92e1_76b702572c06
		outMazeFound: con_0f71d519_7e66_4e78_93b1_f4a9afeb67b6
	)

	outImage = con_12f59ac2_79e9_43c0_a0ad_b62e341d5843
}

public Tests(IntegerArray inExpectedRobotIds, IntegerArray inActualRobotsIds, Image? inRotatedCroppedImage, Bool outRobotsIdsPassed, Bool outMazeFound) step
{
	ArrayDifference<Integer>
	(
		inArray1: inExpectedRobotIds
		inArray2: inActualRobotsIds
		outArray: con_4263c884_81f5_414a_abb0_2e4e5a5c117b
		outArray.Count: con_f699b439_9447_435a_8291_165cd2e55dd2
	)

	//:HIDDENPORT[inReferenceValue] TRUE
	TestIntegerEqualTo
	(
		inValue: con_f699b439_9447_435a_8291_165cd2e55dd2
		inReferenceValue: 0
		outIsEqual: con_5a675cf2_7de9_4839_b5e2_1823f7875dd6
	)

	TestObjectNotNil<Image>
	(
		inObject: inRotatedCroppedImage
		outIsNotNil: con_01c9a6af_4329_45ae_bcbd_a08ecbbc9855
	)

	outRobotsIdsPassed = con_5a675cf2_7de9_4839_b5e2_1823f7875dd6

	outMazeFound = con_01c9a6af_4329_45ae_bcbd_a08ecbbc9855
}

